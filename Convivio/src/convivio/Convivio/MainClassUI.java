package convivio.Convivio;

import java.util.ArrayList;

/**
 * Classe MainClassUI primeiro menu que aparece para a criação de utilizadores 
 * e login.
 * @author Pedro Ribeiro e Duarte Carvalho
 */
public class MainClassUI extends javax.swing.JFrame {
    /**
     * ArrayList de convívios que estão disponíveis para o utilizador.
     */
    private ArrayList<ConvivioDei> listaConvivios;
    /**
     * ArrayList de pessoas que têm "conta" no programa.
     */
    private ArrayList<Pessoa> listaPessoas;
    /**
     * Creates new form MainClassUI
     */
    public MainClassUI() {
        initComponents();
        this.listaConvivios = new ArrayList<>();
        this.listaPessoas = new ArrayList<>();
        teste();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        criarUserButton = new javax.swing.JButton();
        fecharButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Convívios do DEI");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        criarUserButton.setText("Criar um novo utilizador");
        criarUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarUserButtonActionPerformed(evt);
            }
        });

        fecharButton.setText("Fechar");
        fecharButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fecharButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(loginButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(criarUserButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(fecharButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(18, 18, 18)
                .addComponent(loginButton)
                .addGap(18, 18, 18)
                .addComponent(criarUserButton)
                .addGap(18, 18, 18)
                .addComponent(fecharButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void criarUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarUserButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new NewUserUI(this).setVisible(true);
    }//GEN-LAST:event_criarUserButtonActionPerformed

    private void fecharButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fecharButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_fecharButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new LoginUI(this).setVisible(true);
    }//GEN-LAST:event_loginButtonActionPerformed

    /**
     *
     * @return Arraylist de pessoas.
     */
    public ArrayList<Pessoa> getListaPessoas() {
        return listaPessoas;
    }

    /**
     * Adiciona uma pessoa à lista de pessoas com "conta" no programa.
     * @param p Objecto da classe Pessoa.
     */
    public void addPessoa(Pessoa p){
        listaPessoas.add(p);
    }
    
    /**
     * Adiciona um convívio à lista de convívios disponíveis ao utilizador.
     * @param c Objecto da classe ConvivioDei
     */
    public void addConvivio(ConvivioDei c){
        listaConvivios.add(c);
    }
    
    /**
     * Devolve o objecto da Classe pessoa que tenha o nome passado por argumento, devolve
     * null caso náo encontre ninguém.
     * @param s String com o nome de uma pessoa.
     * @return Objecto da classe Pessoa.
     */
    public Pessoa searchPessoa(String s){
        for(Pessoa p : listaPessoas){
            if(s.equals(p.getNome())){
                return p;
            }
        }
        return null;
    }
    
    /**
     * Verifica se a password escrita pelo utilizador é a password da "conta".
     * Caso seja devolve "true", "false" caso contrário.
     * @param p Objecto da classe Pessoa.
     * @param password String com a palavra-passe da pessoa.
     * @return Boolean.
     */
    public boolean isPasswordCorrect(Pessoa p, String password){
        if(password.equals(p.getPassword())){
            return true;
        }else{
            return false;
        }
    }

    /**
     *
     * @return ArrayList de convívios.
     */
    public ArrayList<ConvivioDei> getListaConvivios() {
        return listaConvivios;
    }
    
    /**
     * Devolve o objecto da classe ConvivioDei que tem o nome passado como 
     * argumento.
     * @param nome String com o nome do convívio.
     * @return Objecto da classe ConvivioDei.
     */
    public ConvivioDei getConvivio(String nome){
        for(ConvivioDei cv : listaConvivios){
            if(cv.getNome().equals(nome)){
                return cv;
            }
        }
        return null;
    }
    
    /**
     * Inscreve uma pessoa num local de um determinado convívio.
     * Devolve inteiro, 1 se for realizada com sucesso, -1 se não for possível 
     * inscrever uma pessoa no local.
     * @param c Objecto da classe ConvivioDei.
     * @param p Objecto da classe Pessoa.
     * @param l Objecto da classe Local.
     * @return Inteiro.
     */
    public int inscreverEmLocal(ConvivioDei c, Pessoa p, Local l){
        int index = listaConvivios.indexOf(c);
        int flag = listaConvivios.get(index).inscreverEmLocal(p,l);
        return flag;
    }
    
    /**
     * Desinscreve uma pessoa de um local de um determinado convívio.
     * @param c Objecto da classe ConvivioDei.
     * @param p Objecto da classe Pessoa.
     * @param l Objecto da classe Local.
     */
    public void desisncreverDeLocal(ConvivioDei c, Pessoa p, Local l){
        int index = listaConvivios.indexOf(c);
        listaConvivios.get(index).desinscreverDeLocal(p.getNome(), l);
    }
    
    /**
     *
     */
    public void teste(){
        Bar teste1 = new Bar("Moelas", 60, 5, 45.6, 54.3);
        Bar teste3 = new Bar("24", 50, 5, 45.3, 43.4);
        Aluno a;
        ConvivioDei teste2 = new ConvivioDei("Sou um teste");
        teste2.adicionarLocal(teste1);
        teste2.adicionarLocal(teste3);
        listaConvivios.add(teste2);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainClassUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainClassUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainClassUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainClassUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        new MainClassUI().setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton criarUserButton;
    private javax.swing.JButton fecharButton;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
