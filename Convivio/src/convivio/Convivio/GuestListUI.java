package convivio.Convivio;

import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;

/**
 * Classe GuestListUI serve para mostrar ao utilizador as pessoas de uma
 * determinada guestlist através de uma interface gráfica.
 * @author Pedro Ribeiro e Duarte Carvalho
 */
public class GuestListUI extends javax.swing.JFrame {
    /**
     * Objecto da classe MainClassUI.
     */
    private MainClassUI importantFrame;
    /**
     * Objecto da classe InsideConvUI.
     */
    private InsideConvUI returnFrame;    
    /**
     * String com o nome do convívio.
     */
    private String nomeConvivio;
    /**
     * ArrayList de Strings com os nomes dos bares do convívio.
     */
    private ArrayList<String> bares;
    /**
     * Creates new form GuestListUI
     * @param importantFrame Objecto da classe MainClassUI.
     * @param returnFrame Objecto da classe InsideConvUI.
     * @param nomeConvivio String com o nome do convívio.
     */
    public GuestListUI(MainClassUI importantFrame, InsideConvUI returnFrame, String nomeConvivio) {
        this.importantFrame = importantFrame;
        this.returnFrame = returnFrame;
        this.nomeConvivio = nomeConvivio;
        this.bares = new ArrayList<>();
        populateArray();
        initComponents();
        populateTextArea();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        baresComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        guestListTA = new javax.swing.JTextArea();
        retornarButton = new javax.swing.JButton();

        setResizable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Visualização da Guestlist de cada bar");

        baresComboBox.setModel(new DefaultComboBoxModel(bares.toArray()));
        baresComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baresComboBoxActionPerformed(evt);
            }
        });

        guestListTA.setEditable(false);
        guestListTA.setColumns(20);
        guestListTA.setRows(5);
        jScrollPane1.setViewportView(guestListTA);

        retornarButton.setText("Retornar");
        retornarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retornarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(baresComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(retornarButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(baresComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(retornarButton)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void retornarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retornarButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        returnFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_retornarButtonActionPerformed

    private void baresComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baresComboBoxActionPerformed
        // TODO add your handling code here:
        populateTextArea();
    }//GEN-LAST:event_baresComboBoxActionPerformed

    /**
     * Adiciona os nomes dos bares do convívio ao ArrayList.
     */
    public void populateArray(){
        ConvivioDei convivio = importantFrame.getConvivio(nomeConvivio);
        ArrayList<Local> listaLocais = convivio.getListaLocais();
        for(Local local : listaLocais){
            if(local.isBar()){
                bares.add(local.getNome());
            }
        }
    }
    
    /**
     * Verifica se o bar selecionado na ComboBox tem guestlist ou não. Caso tenha
     * imprime no ecrã as pessoas que estão na guestlist caso contrário informa que a guestlist
     * não tem pessoas de momento.
     */
    private void populateTextArea(){
        String infoLocais = "";
        ConvivioDei convivio = importantFrame.getConvivio(nomeConvivio);
        ArrayList<Local> listaLocais = convivio.getListaLocais();
        for(Local local : listaLocais){
            if(local.isBar() && local.getNome().equals(baresComboBox.getSelectedItem().toString())){
                infoLocais = ((Bar)local).getGuestListInfo(convivio.getInscricoes());
                break;
            }
        }
        if(infoLocais.equals("")){
            guestListTA.setText("Este bar ainda não tem pessoas na guestlist.");
        }else{
            guestListTA.setText(infoLocais);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> baresComboBox;
    private javax.swing.JTextArea guestListTA;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton retornarButton;
    // End of variables declaration//GEN-END:variables
}
